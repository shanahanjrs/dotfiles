" Start Vundle 

" Required
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" ---

"Let Vundle manage itself
Plugin 'gmarik/vundle'
" ---

"Put Github plugins here:
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
" ---

" Color Schemes
Plugin 'flazz/vim-colorschemes'
Plugin 'tomasr/molokai'
" ---

"Brief help:
" :PluginList		-list configured plugins
" :PluginInstall	-install plugins
" :PluginUpdate     -Update Plugins
" :PluginSearch foo	-search for foo
" :PluginClean  	-confirm removal of unused plugins
"
" see :h vundle for more details
" NOTE: comments after Bundle are now allowed

call vundle#end()
filetype plugin indent on
" End Vundle

" Return cursor to last known position
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END


set encoding=utf-8
set history=500		"500 commands back
set undofile		"Persistant undo
set undolevels=500	"Undo's
set undoreload=500	"Undo buffer

" Set a backup directory for vim
set undodir=~/.vim/backup/
set backupdir=~/.vim/backup/
set directory=~/.vim/backup/

" remap 'jj' to escape in insert mode
inoremap jj <Esc>

" Fix broken backspace in 7.4
set backspace=2

"Number of lines to show around cursor
set scrolloff=10
set sidescrolloff=10

"Show line numbers
set number

"Turn on syntax highlighting
syntax on
set background=dark	"Assumes a dark bg
execute "set colorcolumn=" . join(range(81,335), ',') 	

			"Display different color line in column 80
			"to show you when to line break and
			"Sets colorcolumn to black
:hi ColorColumn ctermbg=black guibg=black
			"Makes anything past 80 col red/white
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%80v.\+/

"Highlight search terms
set hlsearch

set laststatus=2

set ttyfast

"In status bar, show incomlete commands as they are typed
set showcmd

"Turn off spell check
set nospell

"Always display the current cursor pos. in the status bar.
set ruler

"Yank to system clipboard by default
set clipboard=unnamed

" Indent using Google's python style guide
setlocal indentexpr=GetGooglePythonIndent(v:lnum)
let s:maxoff = 50 " maximum number of lines to look backwards.
function GetGooglePythonIndent(lnum)
  " Indent inside parens.
  " Align with the open paren unless it is at the end of the line.
  " E.g.
  "   open_paren_not_at_EOL(100,
  "                         (200,
  "                          300),
  "                         400)
  "   open_paren_at_EOL(
  "       100, 200, 300, 400)
  call cursor(a:lnum, 1)
  let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        \ . " =~ '\\(Comment\\|String\\)$'")
  if par_line > 0
    call cursor(par_line, 1)
    if par_col != col("$") - 1
      return par_col
    endif
  endif
  " Delegate the rest to the original function.
  return GetPythonIndent(a:lnum)
endfunction
let pyindent_nested_paren="&sw*2"
let pyindent_open_paren="&sw*2"
" ---

" Some extra indentation magic...
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

" For more natural looking splitting
set splitbelow

"Automatically re-read files changed outside of Vim.
set autoread

"Make Windows compatible (gross)
if has('win32') || has('win64')
	set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/\
after,$HOME/.vim/after
endif
